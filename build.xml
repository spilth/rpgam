<project name="rpgam" default="run-tests">

	<!-- Propreties -->
	<property name="applicationName"         value="RPG Audio Mixer" />
	
	<!-- Main Properties -->
	<property name="sourceDirectory"         location="src" />
    <property name="libraryDirectory"        location="lib/shared" />
	<property name="buildDirectory"          location="build" />
	<property name="classesDirectory"        location="${buildDirectory}/classes" />

	<!-- Test Properties -->
	<property name="testSourceDirectory"     location="test" />
    <property name="testLibraryDirectory"    location="testlib" />
	<property name="testDirectory"           location="${buildDirectory}/test" />
	<property name="testClassesDirectory"    location="${testDirectory}/classes" />
	<property name="testReportDirectory"     location="${testDirectory}/reports" />

	<!-- Distribution Properties -->
	<property name="distDirectory"           location="dist" />
	<property name="iconsDirectory"          location="icons" />
	<property name="version"                 value="X.Y.Z" />

	<!-- Jar Properties -->
	<property name="jarDirectory"            location="${distDirectory}/jar" />
	<property name="unjarDirectory"          location="${distDirectory}/unjar" />
	<property name="jarFile"                 location="${jarDirectory}/rpgam.jar" />
	<property name="mainClass"               value="com.rpgaudiomixer.RPGAudioMixer"/>

	<!-- Exe Properties -->
	<property name="exeDirectory"            location="${distDirectory}/exe" />
	<property name="exeName"                 value="rpgam.exe" />
	<property name="exeFile"                 location="${exeDirectory}/${exeName}" />
	
	<!-- Native Library Properties -->
	<property name="macLibraryDirectory"     location="lib/native/mac" />
	<property name="windowsLibraryDirectory" location="lib/native/windows" />
	<property name="linuxLibraryDirectory"   location="lib/native/linux" />

	<!-- Layout Properties -->
	<property name="macLayoutDirectory"        location="${distDirectory}/layout/mac" />
	<property name="windowsLayoutDirectory"    location="${distDirectory}/layout/windows" />

	<!-- Installer Properties -->
	<property name="installerDirectory"        location="${distDirectory}/installers" />
	<property name="installerName"             value="rpgaudiomixer_${version}" />
	<property name="windowsInstallerDirectory" location="${installerDirectory}/windows" />
	<property name="macInstallerDirectory"     location="${installerDirectory}/mac" />
	<property name="linuxInstallerDirectory"   location="${installerDirectory}/linux" />
	<property name="windowsInstallerFile"      location="${windowsInstallerDirectory}/${installerName}.exe" />	
	<property name="macInstallerFile"          location="${macInstallerDirectory}/${installerName}.dmg" />	
	<property name="linuxInstallerFile"        location="${linuxInstallerDirectory}/${installerName}.rpm" />	
	
	<!-- Upload Properties -->
	<property name="uploadServer" value="rocket.alienwebshop.com" />
	<property name="uploadDirectory" value="/home/www/brian/rpgaudiomixer/temp" />

	<!-- Task Properties -->
	<property name="launch4j.dir" location="vendor/launch4j" />

	<!-- Classpaths -->

	<path id="classpath">
        <fileset dir="${libraryDirectory}" includes="**/*.jar"/>
        <fileset dir="${macLibraryDirectory}" includes="**/*.jar"/>
    </path>

    <path id="testClasspath">
        <fileset dir="${libraryDirectory}"     includes="**/*.jar"/>
        <fileset dir="${jarDirectory}"         includes="**/*.jar"/>
        <fileset dir="${testLibraryDirectory}" includes="**/*.jar"/>
    </path>

	<!-- Ant Tasks -->

	<taskdef name="launch4j" 
	     classname="net.sf.launch4j.ant.Launch4jTask"
	     classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />

	<!-- Targets -->

	<target name="init">
		<mkdir dir="${buildDirectory}" />
		<mkdir dir="${classesDirectory}" />
		<mkdir dir="${testClassesDirectory}" />
		<mkdir dir="${testReportDirectory}" />
		<mkdir dir="${distDirectory}" />
		<mkdir dir="${jarDirectory}"/>
		<mkdir dir="${exeDirectory}" />
		<mkdir dir="${installerDirectory}" />
		<mkdir dir="${unjarDirectory}" />
	</target>

	<target name="compile" depends="init">
		<javac srcdir="${sourceDirectory}" destdir="${classesDirectory}" classpathref="classpath" />
		<copy todir="${classesDirectory}">
			<fileset dir="${sourceDirectory}">
				<include name="**/*.properties" />
			</fileset>
		</copy>
	</target>

	<target name="jar" depends="compile" description="Create the JAR used by all platforms">
		<jar destfile="${jarFile}" basedir="${classesDirectory}" manifest="manifest.txt" />
    </target>

	<target name="executable-windows" depends="jar" description="Create Windows executable (EXE)">
		<launch4j configFile="scripts/launch4j.xml" outfile="${exeFile}" />
	</target>

	<target name="executable-mac" depends="jar" description="Create Mac executable (APP)">
		<property name="macApplicationBundle" location="${macLayoutDirectory}/${applicationName}.app" />

		<mkdir dir="${macApplicationBundle}/Contents" />
		<mkdir dir="${macApplicationBundle}/Contents/MacOS" />
		<mkdir dir="${macApplicationBundle}/Contents/Resources" />

		<copy todir="${macApplicationBundle}/Contents"           file="scripts/Info.plist" />
		<copy todir="${macApplicationBundle}/Contents/Resources" file="images/rpgam.icns" />
		<copy todir="${macApplicationBundle}/Contents/MacOS"     file="${jarFile}"  />

		<copy todir="${macApplicationBundle}/Contents/MacOS/lib">
			<fileset dir="${libraryDirectory}" />
			<fileset dir="${macLibraryDirectory}" />
		</copy>

		<copy todir="${macApplicationBundle}/Contents/MacOS/icons">
			<fileset dir="${iconsDirectory}" />
		</copy>

	</target>

	<target name="executable-linux" depends="jar" description="Create Linux executable (???)">

	</target>
	
	<target name="executables" depends="executable-windows, executable-mac, executable-linux"
		description="Create executables for all platforms" />
	
	<target name="installer-windows" depends="executable-windows" description="Create the installer for Windows (EXE)">
		<!-- Lay out files needed for building the installer -->
		<mkdir dir="${windowsLayoutDirectory}" />
		<copy file="${jarFile}" todir="${windowsLayoutDirectory}" />
		<copy todir="${windowsLayoutDirectory}/lib">
			<fileset dir="${libraryDirectory}" />
			<fileset dir="${windowsLibraryDirectory}" />
		</copy>
		<copy todir="${windowsLayoutDirectory}/icons">
			<fileset dir="${iconsDirectory}" />
		</copy>
		<copy todir="${windowsLayoutDirectory}" file="${exeFile}" />

		<mkdir dir="${windowsInstallerDirectory}" />

		<!-- Build the installer using NSIS -->
		<exec executable="vendor/nsis/makensis.exe">
			<arg value="/DVERSION=${version}" />
			<arg value="scripts/rpgam-setup.nsi" />
		</exec>
	</target>

	<target name="installer-mac" depends="executable-mac" description="Create the installer for Mac (DMG)">
		<delete dir="${macInstallerDirectory}" />
		<mkdir dir="${macInstallerDirectory}" />

		<exec executable="/usr/bin/hdiutil">
			<arg value="create" />
			<arg value="-srcfolder" />
	 		<arg value="${macLayoutDirectory}" />
			<arg value="-volname" />
	 		<arg value="${applicationName} ${version}" />
			<arg value="${macInstallerFile}" />		
		</exec>
		
		<exec executable="/usr/bin/hdiutil">
			<arg value="internet-enable" />
			<arg value="-yes" />
			<arg value="${macInstallerFile}" />		
		</exec>
		
	</target>

	<target name="installer-linux" depends="executable-linux" description="Create the installer for Linux">
		<mkdir dir="${linuxInstallerDirectory}" />
	</target>
	
	<target name="installers"
		depends="installer-windows, installer-mac, installer-linux"
		description="Create all installers" />

	<target name="upload-init">
		<input addproperty="username" message="Username:" />
		<input addproperty="password" message="Password:" />
	</target>
	
	<target name="upload-windows" depends="installer-windows, upload-init">
		<scp todir="${username}:${password}@${uploadServer}:${uploadDirectory}" verbose="yes" trust="true">
			<fileset dir="${windowsInstallerDirectory}" />
		</scp>
	</target>

	<target name="upload-mac" depends="installer-mac, upload-init">
		<scp todir="${username}:${password}@${uploadServer}:${uploadDirectory}" verbose="yes" trust="true">
			<fileset dir="${macInstallerDirectory}" />
		</scp>
	</target>

	<target name="upload-linux" depends="installer-linux, upload-init">
		<scp todir="${username}:${password}@${uploadServer}:${uploadDirectory}" verbose="yes" trust="true">
			<fileset dir="${linuxInstallerDirectory}" />
		</scp>
	</target>
	
	<target name="uploads" depends="upload-windows, upload-mac, upload-linux" />

	<!-- Testing & Support Targets -->
	
	<target name="compile-tests" depends="jar">
		<javac srcdir="${testSourceDirectory}" destdir="${testClassesDirectory}" classpathref="testClasspath" />
	</target>

	<target name="run-tests" depends="compile-tests">
		<junit printsummary="yes">
			<classpath>
		        <fileset dir="${libraryDirectory}"     includes="**/*.jar" />
		        <fileset dir="${testLibraryDirectory}" includes="**/*.jar" />
		        <path location="${classesDirectory}" />
		        <path location="${testClassesDirectory}" />
			</classpath>

			<formatter type="plain" />

			<batchtest fork="yes" todir="${testReportDirectory}">
				<fileset dir="${testClassesDirectory}" />
			</batchtest>
		</junit>
	</target>

	<target name="unjar" depends="jar">
		<unjar src="${jarFile}" dest="${unjarDirectory}" />		
	</target>
	
	<target name="javadoc" depends="compile">
		<javadoc
		           destdir="dist/docs/api"
		           author="true"
		           version="true"
		           use="true"
		           windowtitle="${applicationName} API">

		    <packageset dir="src" defaultexcludes="yes">
		      <include name="com/rpgaudiomixer/**"/>
		    </packageset>

		    <doctitle><![CDATA[<h1>${applicationName}</h1>]]></doctitle>
		    <bottom><![CDATA[<i>Copyright &#169; 2000 Dummy Corp. All Rights Reserved.</i>]]></bottom>
		    <tag name="todo" scope="all" description="To do:"/>
		    <link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="C:\tmp"/>
		    <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
		  </javadoc>		
	</target>
			
	<target name="clean">
		<delete dir="${buildDirectory}" />
		<delete dir="${distDirectory}" />
	</target>

	<target name="full" depends="clean, run-tests" />

</project>
